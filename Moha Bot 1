import discord
from discord.ext import commands
import cos
import discord 
from discord.ext import commands, tasks

import random

from discord_webhook import DiscordWebhook, DiscordEmbed

from random import choice

from discord.ext.commands import has_permissions, MissingPermissions, errors

import asyncio
from datetime import datetime
import json
import time
import datetime
import sys
import requests
import sqlite3

async def get_pre(client, message):
    '''Gets the prefix for the guild'''
    try:
        result = await client.db.config.find_one({'_id': str(message.guild.id)})
    except AttributeError:
        return '^'
    if not result or not result.get('prefix'):
        return '^'
    return result

client = commands.Bot(command_prefix="&")
client.remove_command("help")  

@client.event
async def on_ready():
	print("Ready")
	
tenorkey = "6JKJQX4V4OHD"
limit = 50
media_filter = "basic"
kiss = "animekiss"
hug = "animehug"
slap = "animeslap"
cuddle = "animecuddle"
blush = "animeblush"
pat = "animepat"
facepalm = "animefacepalm"
poke = "animepoke"

kissgifs = requests.get(
    "https://api.tenor.com/v1/search?q=%s&key=%s&limit=%s&media_filter=%s" % (kiss, tenorkey, limit, media_filter))
huggifs = requests.get(
    "https://api.tenor.com/v1/search?q=%s&key=%s&limit=%s&media_filter=%s" % (hug, tenorkey, limit, media_filter))
slapgifs = requests.get(
    "https://api.tenor.com/v1/search?q=%s&key=%s&limit=%s&media_filter=%s" % (slap, tenorkey, limit, media_filter))
cuddlegifs = requests.get(
    "https://api.tenor.com/v1/search?q=%s&key=%s&limit=%s&media_filter=%s" % (cuddle, tenorkey, limit, media_filter))
blushgifs = requests.get(
    "https://api.tenor.com/v1/search?q=%s&key=%s&limit=%s&media_filter=%s" % (blush, tenorkey, limit, media_filter))
patgifs = requests.get(
    "https://api.tenor.com/v1/search?q=%s&key=%s&limit=%s&media_filter=%s" % (pat, tenorkey, limit, media_filter))
facepalmgifs = requests.get(
    "https://api.tenor.com/v1/search?q=%s&key=%s&limit=%s&media_filter=%s" % (facepalm, tenorkey, limit, media_filter))
pokegifs = requests.get(
    "https://api.tenor.com/v1/search?q=%s&key=%s&limit=%s&media_filter=%s" % (poke, tenorkey, limit, media_filter))

kiss_gifs = json.loads(kissgifs.content)
hug_gifs = json.loads(huggifs.content)
slap_gifs = json.loads(slapgifs.content)
cuddle_gifs = json.loads(cuddlegifs.content)
blush_gifs = json.loads(blushgifs.content)
pat_gifs = json.loads(patgifs.content)
facepalm_gifs = json.loads(facepalmgifs.content)
poke_gifs = json.loads(pokegifs.content) 

logo = "https://cdn.discordapp.com/attachments/791070080964231180/806276949046591548/IMG_20201210_193753_132.jpg"
	
@client.command(aliases=["h"])
@commands.has_permissions(administrator=True)
async def help(ctx):
	embed = discord.Embed(description = "Les commandes disponibles:", color=0xB300FF, timestamp=ctx.message.created_at)
	embed.add_field(name = "🛠 》Modération", value = "```ban,kick,check,mute,unmute,embeddm,clear```", inline = True)
	embed.add_field(name = "♠️ 》 ADMIN", value = "```règlement,channel,nuke,unbanall```")
	embed.add_field(name = "🌍 》Général", value = "```avatar,membercount,serverinfo,servericon,add_bot```", inline = True)
	embed.add_field(name = "👑 》Owner", value = "```listen,watch,stream,play,servers,name,prefix```", inline = True)
	embed.add_field(name = "📈 》Détails", value="```ping```", inline = True)
	embed.add_field(name = "❄ 》Fun",value = "```marry,blush,pat,kiss,hug,cuddle,slap,howgay,howlesbian,thotrate,8ball, rate,roast,penis,ship```", inline = True)
	embed.set_image(url = "https://spoilerguy.com/wp-content/uploads/2020/01/Meliodas-Seven-Deadly-Sins.jpg")
	embed.set_author(name = ctx.author.name, icon_url=ctx.author.avatar_url)
	embed.set_footer(text = "help")
	await ctx.send(embed = embed)

@client.command()
@commands.has_permissions(ban_members=True)
async def bann(ctx, member : discord.Member, *, reason=None):
	message = await ctx.send(f"Voulez-vous vraiment ban {member} de {ctx.guild.name} ?")		
	await message.add_reaction("✅")
	await message.add_reaction("❌")


	def checkEmoji(reaction, user):
		return ctx.message.author == user and message.id == reaction.message.id and (str(reaction.emoji) == "✅" or str(reaction.emoji) == "❌")

	try:
		reaction, user = await client.wait_for("reaction_add", timeout = 10, check = checkEmoji)		
		if reaction.emoji == "✅":
			await ctx.guild.ban(member, reason = reason)
			await ctx.send(f"{member} est maintenant banni !")
		else:
			await ctx.send(f"D'accord, je ne ban pas {member} !")
	except:
		await ctx.send(f"Le temps est écoulé ou vous ne pouvez pas ban {member} !")
    
@client.command(help=("Salut"))
async def setup_verif(ctx, arg, arg2):
    embed = discord.Embed(title = f"{arg}・{ctx.guild.name} Vérification", description = f"Bonjour/Bonsoir et Bienvenue dans le serveur {ctx.guild.name} ! Pour accèder à l'intégralité du serveur veuillez cliquez sur la réaction suivante {arg2}.", timestamp=ctx.message.created_at, color=0xFF0000)
    embed.set_footer(text="Vérification")
    embed.set_image(url=ctx.guild.icon_url)
    await ctx.send(embed=embed)  
    
@client.command()
async def spam(ctx, *text):
    salary = 1500
    while salary < 2000:
        await ctx.send(f"{text}")
    
@client.command(aliases=["regle"])
@commands.has_permissions(administrator=True)
async def règlement(ctx):
  embed = discord.Embed(title=f"🚀 **Réglement** **__{ctx.guild.name}__**", description="Merci de lire le règlement et de l'approuver. Il est nécessaire au bon fonctionnement de la communauté, personne ne peut ignorer ces règles.", color=0xFF0000, timestamp=ctx.message.created_at)
  embed.add_field(name="🔴 **__Règle n°1__**: *Respect des règles de DISCORD*.", value="Respecter les Guidelines et Termes de Discord.")
  embed.add_field(name="🔴 **__Règle n°2__**: *Les doubles comptes*", value="L'usage de doubles-comptes est déconseillé et peut ainsi vous attirer des problèmes.")
  embed.add_field(name="🔴 **__Règle n°3__**: *La publicité*", value ="La publicité est interdite, sous quelque forme que ce soit.")
  embed.add_field(name="🔴 **__Règle n°4__**: *Le spam & flood*", value ="Il est interdit de spam ou de flood au sein des salons textuels ou vocaux.")
  embed.add_field(name="🔴 **__Règle n°5__**: *Le troll & les insultes*", value="Le troll est strictement interdit dans le serveur. Il est également interdit d'insulter qui que ce soit. Nous vous demandons de garder une attitude mature.")
  embed.add_field(name="🔴 **__Règle n°6__**: *Le langage*", value="Seul le Français est autorisé au sein du serveur.")
  embed.set_image(url = "https://cdn.discordapp.com/attachments/817768028271542283/819907360033603584/image1-1.gif")
  embed.set_footer(text="Réglement", icon_url=ctx.guild.icon_url)  
  message = await ctx.send(embed=embed)
  await message.add_reaction("✅")
  await ctx.message.delete()
  
@client.command(pass_context=True, no_pm=True, aliases=["r", "r34", "rule"])
@commands.cooldown(3, 5)
async def rule34(ctx, *, message:str=None):
	if ctx.message.channel.is_nsfw == False:
		embed=discord.Embed(description = "Ce salon n'es pas **NSFW** !", color = 0x3333cc)
		x = await client.send(embed=embed)
		await asyncio.sleep(5)
		return await ctx.delete_message(x)
	limit = 100
	if message==None:
		listu = ["anime", "ass", "boobs", "anal", "pussy", "thighs", "yaoi", "yuri", "bdsm"]
		message = listu[random.randint(0, len(listu)-1)]
	message = message.replace(" ", "_")
	url = "http://rule34.xxx/index.php?page=dapi&s=post&q=index&json=1&limit={}&tags={}".format(limit, message)
	try:
		response = requests.get(url)
		data = json.loads(response.text)
		limit = len(data)
	except json.JSONDecodeError:
		embed=discord.Embed(description = "Couldn't find a picture with that tag or there was a server problem", color = 0x3333cc)
		x = await ctx.send(embed=embed)
		await asyncio.sleep(5)
		return await ctx.delete_message(x)
	x = data[random.randint(0, limit-1)]
	final_url = "http://img.rule34.xxx/images/{}/{}".format(x["directory"], x["image"])
	embed=discord.Embed(title = "{} Voici votre recherche.".format(ctx.message.author.name), color = 0x3333cc)
	embed.set_image(url = final_url)
	embed.set_footer(text = "From Rule34, Tag: {}, Resultats limites: {}".format(message, limit))
	await ctx.send(embed=embed)  

@client.command()
async def servericon(ctx):
    await ctx.send("{}".format(ctx.guild.icon_url))
    
@client.command()
async def say(ctx, *message):
    await ctx.message.delete()
    await ctx.send(" ".join(message))
    
@client.command()
async def embed(ctx, texte):
    embed = discord.Embed(description=f"{texte}", color=0xFF0000, timestamp=ctx.message.created_at)
    embed.set_footer(text=ctx.guild.name)
    await ctx.send(embed=embed)
    
@client.command()
async def serverinfo(ctx):
    time = ctx.message.author.guild.created_at

    corfor = time.strftime("%d %b, %Y at %H:%M")

    channels = ctx.message.author.guild.text_channels
    voicechans = ctx.message.author.guild.voice_channels
    categories = ctx.message.author.guild.categories
    roles = ctx.message.author.guild.roles
    online = 0
    for member in ctx.message.author.guild.members:
        if member.status != discord.Status.offline:
            online += 1
    bots = 0
    for member in ctx.message.author.guild.members:
        if member.bot == True:
            bots += 1
    humans = 0
    for member in ctx.message.author.guild.members:
        if member.bot == False:
            humans += 1
    # fa = " "
    if ctx.message.author.guild.mfa_level == 0:
        fa = "No"
    if ctx.message.author.guild.mfa_level == 1:
        fa = "Yes"
    # ver = " "

    embed = discord.Embed(title="Info of {}".format(ctx.message.author.guild.name),
                          description="Owned by {}".format(ctx.message.author.guild.owner), color=0x000000)
    embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
    embed.set_thumbnail(url=ctx.message.author.guild.icon_url)
    embed.set_footer(text="ID: {} | Created at: {}".format(ctx.message.author.guild.id, corfor))
    embed.add_field(name="Server region", value="{}".format(ctx.message.author.guild.region), inline=True)
    embed.add_field(name="Channels count", value="{}".format(len(channels)), inline=True)
    embed.add_field(name="Voice channels count", value="{}".format(len(voicechans)), inline=True)
    embed.add_field(name="Categories count", value="{}".format(len(categories)), inline=True)
    embed.add_field(name="Roles count", value="{}".format(len(roles)), inline=True)
    embed.add_field(name="Members", value="{}".format(ctx.message.author.guild.member_count), inline=True)
    # embed2 = discord.Embed(color=0x000000)
    embed.add_field(name="Requires 2FA", value="{}".format(fa), inline=True)
    embed.add_field(name="Boosters", value="{}".format(ctx.message.author.guild.premium_subscription_count),
                    inline=True)
    embed.add_field(name="Boost level", value="{}".format(ctx.message.author.guild.premium_tier), inline=True)
    if str(ctx.message.author.guild.verification_level) == "none":
        ver = "None"
        embed.add_field(name="Verification level", value="{}".format(ver))
    # print(ver)
    elif str(ctx.message.author.guild.verification_level) == "low":
        ver = "Must have a verified email"
        embed.add_field(name="Verification level", value="{}".format(ver))
    elif str(ctx.message.author.guild.verification_level) == "medium":
        ver = "Must have a verified email and be registered for 5 mins"
        embed.add_field(name="Verification level", value="{}".format(ver))
    elif str(ctx.message.author.guild.verification_level) == "high":
        ver = "Must have a verified email, be registered for 5 minutes and be a member for 10 mins"
        embed.add_field(name="Verification level", value="{}".format(ver))
    elif str(ctx.message.author.guild.verification_level) == "extreme":
        ver = "Must have a verified phone number"
        embed.add_field(name="Verification level", value="{}".format(ver))

    await ctx.send(embed=embed)

@client.command()
async def membercount(ctx):
    time = datetime.datetime.now()
    corfor = time.strftime("%d %b, %Y at %H:%M")

    online = 0
    for member in ctx.message.author.guild.members:
        if member.status != discord.Status.offline:
            online += 1
    bots = 0
    for member in ctx.message.author.guild.members:
        if member.bot == True:
            bots += 1
    humans = 0
    for member in ctx.message.author.guild.members:
        if member.bot == False:
            humans += 1

    embed = discord.Embed(color=0x000000)
    embed.add_field(name="Members", value="{}".format(ctx.message.author.guild.member_count), inline=True)
    embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)

    await ctx.send(embed=embed)


@client.command()
@commands.is_owner()
async def servers(ctx):
    serverss = client.guilds
    strings = []
    for guild in serverss:
        strings.append("{}".format(guild.name))
    readme = ", ".join(strings)
    await ctx.send("```{}```".format(readme))

@client.command()
@commands.has_permissions(administrator=True)
async def nuke(ctx, channel_name):
    channel_id = int(''.join(i for i in channel_name if i.isdigit()))
    existing_channel = client.get_channel(channel_id)
    if existing_channel is not None:
        await existing_channel.clone(reason="Channel nuke")
        em = discord.Embed(description=f'Le salon {channel_name} a été nuke par {ctx.author.name} !', colour=discord.Color.blurple(), timestamp=ctx.message.created_at)
        em.set_author(name = ctx.author.name, icon_url=ctx.author.avatar_url)
        em.set_footer(text = "Nuke Channel", icon_url = ctx.guild.icon_url)                                     
        await ctx.send(embed=em)
        await existing_channel.delete()
    else:
        if existing_channel is not None:
            await existing_channel.clone(reason="Channel Nuke")
        em = discord.Embed(title=f"Aucun channel `{channel_name}` de créé",
                           colour=discord.Color.blurple())
        await ctx.send(embed=em)

@client.command(hidden=True)
@commands.is_owner()
async def name(ctx, *, name:str):
    """Renames the bot"""
    await client.user.edit(username=name)
    await ctx.send(f"Mon nouveau pseudo est : `{name}`")
	
@client.command()
@commands.has_permissions(manage_messages=True)
async def embeddm(ctx, user: discord.Member, *, message: str):
	try:
		embed = discord.Embed(title="Mail d'un membre !", description=f'{message}', color=0x1C00FF, timestamp=ctx.message.created_at)
		embed.set_footer(text=f'Par {ctx.author.name}', icon_url=ctx.author.avatar_url)
		await user.send(embed=embed)
		await ctx.send(f"{user.name} vien de recevoir votre message !")
	except discord.Forbidden:
		await ctx.send("{user.name} n'a pas reçu le message !.")
		await ctx.message.delete()

async def createMutedRole(ctx):
    mutedRole = await ctx.guild.create_role(name = "Muted",
                                            permissions = discord.Permissions(
                                                send_messages = False,
                                                speak = False),
                                            reason = "Creation du role Muted pour mute des gens.")
    for channel in ctx.guild.channels:
        await channel.set_permissions(mutedRole, send_messages = False, speak = False)
    return mutedRole

async def getMutedRole(ctx):
    roles = ctx.guild.roles
    for role in roles:
        if role.name == "Muted":
            return role
    
    return await createMutedRole(ctx)

@client.command(aliases=["m"])
@commands.is_owner()
async def mute(ctx, member : discord.Member, *, reason = "Aucune raison n'a été renseigné"):
    mutedRole = await getMutedRole(ctx)
    await member.add_roles(mutedRole, reason = reason)
    await ctx.send(f"{member.mention} a été mute !")

@client.command(aliases=["u"])
@commands.is_owner()
async def unmute(ctx, member : discord.Member, *, reason = "Aucune raison n'a été renseigné"):
    mutedRole = await getMutedRole(ctx)
    await member.remove_roles(mutedRole, reason = reason)
    await ctx.send(f"{member.mention} a été unmute !")
	
@client.command(aliases=["pp"])
async def avatar(ctx, *, user : discord.Member=None):
	'''Aka &pp | &avatar @user'''
	userAvatarUrl = user.avatar_url
	embed = discord.Embed(title = f"Voici l'avatar de {user.name}.", color = 0xFF0000, timestamp=ctx.message.created_at)
	embed.set_image(url = userAvatarUrl)
	embed.set_footer(text = f"Demande de {ctx.author.name} | Image de {user.name}", icon_url=ctx.author.avatar_url)
	
	await ctx.send(embed = embed)
	
@client.command(aliases=["k"])
@commands.has_permissions(kick_members=True)
async def kick(ctx, user : discord.User, *, reason = "None"):
	'''Aka &k | &kick @user *Reason'''
	reason = " ".join(reason)
	#await ctx.guild.kick(user, reason = reason)
	embed = discord.Embed(title = ":white_check_mark: Kick réussi !", description = f"{user.name} a bien été kick.", color = 0x34FF00, timestamp=ctx.message.created_at)
	embed.set_footer(text = f"Par {ctx.author.name}", icon_url=ctx.author.avatar_url)
	
	await ctx.send(f"{user.name} est kick pour la raison suivante : `{reason}`")
	
	await ctx.send(embed = embed)
	
@client.command()
@commands.has_permissions(manage_messages=True)
async def check(ctx, user: discord.Member = None):
	if user is None:
		user = ctx.message.author
	if user.activity is not None:
		game = user.activity.name
	else:
		game = None
	voice_state = None if not user.voice else user.voice.channel
	embed = discord.Embed(timestamp=ctx.message.created_at, color = 0xC4FF00)
	embed.add_field(name='User ID:', value=user.id, inline=False)
	embed.add_field(name='Nick:', value=user.nick, inline=False)
	embed.add_field(name='Status:', value=user.status, inline=False)
	embed.add_field(name='On Mobile:', value=user.is_on_mobile(), inline=False)
	embed.add_field(name='In Voice:', value=voice_state, inline=True)
	embed.add_field(name='Game / Custom Status:', value=game, inline=False)
	embed.add_field(name='Highest Role:', value=user.top_role.name, inline=False)
	embed.add_field(name='Account Created Date:', value=user.created_at.__format__('%A, %d. %B %Y'))
	embed.add_field(name='Account Creation Time:', value=user.created_at.__format__('%H:%M:%S'))
	embed.add_field(name='Join Date:', value=user.joined_at.__format__('%A, %d. %B %Y'), inline=False)
	embed.add_field(name='Joined Time:', value=user.joined_at.__format__('%H:%M:%S'), inline=True)
	embed.set_thumbnail(url=user.avatar_url)
	embed.set_author(name=user.name, icon_url=user.avatar_url)
	embed.set_footer(text=f'Demandé par {ctx.author.name}', icon_url=logo)
	await ctx.send(embed=embed)
	
@client.command()
@commands.has_permissions(manage_messages=True)
async def clear(ctx, *, number):
    try:
        msgs = [] #Empty list to put all the messages in the log
        number = int(number) + 1 #Converting the amount of messages to delete to an integer
        msgs = await ctx.channel.history(limit=number).flatten()
        await ctx.channel.delete_messages(msgs)
    except Exception as e:
        print(e)
        
@client.command(aliases=["ch"])
@commands.is_owner()
async def channel(ctx, channel_name='Moha.Tln'):
    guild = ctx.guild
    existing_channel = discord.utils.get(guild.channels, name=channel_name)
    if not existing_channel:
        await ctx.send(f"Je vien de créer le salon textuel `{channel_name}`")
        await guild.create_text_channel(channel_name)
    
@client.command()
@commands.is_owner()
async def play(ctx, *, arg):
    emb = discord.Embed( title = ":white_check_mark: Statut modifié avec succés !", description = f"Je play maintenant : `{arg}`", color = discord.Color.blue(), timestamp=ctx.message.created_at)
    emb.set_footer(text = f"Demandé par {ctx.author.name}", icon_url=ctx.author.avatar_url)
    if not commands.NotOwner:
        await ctx.send(f"{user.name} vous n'avai pas la permission !")
    else:
        await client.change_presence(activity=discord.Game(name=arg))
        await ctx.send( embed = emb )

@client.command()
@commands.is_owner()
async def watch(ctx, *, arg):
    emb = discord.Embed( title = ":white_check_mark: Statut modifié avec succés !", description = f"Je watch maintenant : `{arg}`", color = discord.Color.blue(), timestamp=ctx.message.created_at)
    emb.set_footer(text = f"Demandé par {ctx.author.name}", icon_url=ctx.author.avatar_url)
    if not commands.NotOwner:
        await ctx.send(f"{user.name} vous n'avais pas la permission !")
    else:
        await client.change_presence(status=discord.Status.idle, activity=discord.Activity(name=arg, type=discord.ActivityType.watching))
        await ctx.send( embed = emb )

@client.command()
@commands.is_owner()
async def listen(ctx, *, arg):
    emb = discord.Embed( title = ":white_check_mark: Statut modifié avec succés !", description = f"Je listen maintenant : `{arg}`", color = discord.Color.blue(), timestamp=ctx.message.created_at)
    emb.set_footer(text = f"Demandé par {ctx.author.name}", icon_url=ctx.author.avatar_url)
    if not commands.NotOwner:
        await ctx.send(f"{user.name} vous n'avais pas la permission !")
    else:
        await client.change_presence(status=discord.Status.idle, activity=discord.Activity(name=arg, type=discord.ActivityType.listening))
        await ctx.send( embed = emb )

@client.command()
@commands.is_owner()
async def stream(ctx, *, arg):
    emb = discord.Embed( title = ":white_check_mark: Statut modifié avec succés !", description = f"Je stream maintenant : `{arg}`", color = discord.Color.blue(), timestamp=ctx.message.created_at)
    emb.set_footer(text = f"Demandé par {ctx.author.name}", icon_url=ctx.author.avatar_url)
    if not commands.NotOwner:
        await ctx.send(f"{user.name} vous n'avais pas la permission !")
    else:
        await client.change_presence(status=discord.Status.idle, activity=discord.Activity(name=arg, type=discord.ActivityType.streaming))
        await ctx.send( embed = emb )

    
@client.command(aliases=["add"])
async def add_bot(ctx):
	user = discord.User
	embed = discord.Embed(title = "🌩・Ajouter le bot ici", timestamp=ctx.message.created_at, url = "https://discord.com/oauth2/authorize?client_id=760888415020908594&scope=bot&permissions=2147483647", color = 0xB300FF)
	embed.set_author(name = ctx.author.name, icon_url = ctx.author.avatar_url)
	embed.set_image(url = "https://spoilerguy.com/wp-content/uploads/2020/01/Meliodas-Seven-Deadly-Sins.jpg")
	await ctx.send(embed = embed)

@client.command()
async def pat(ctx, *, user: discord.Member):
    embed = discord.Embed(title="{} caresses {}. Trop Chou!".format(ctx.message.author, user), color=0x000000)
    result = random.choice(pat_gifs["results"])
    chosen_media = result["media"][0]
    url = chosen_media["gif"]["url"]
    embed.set_image(url=url)
    await ctx.send(embed=embed)
    
@pat.error
async def pat_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(title=f"{ctx.author.name} fait une caresse ! Grr", color=0x000000)
        result = random.choice(pat_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(title="Hey! Don't feel down. Here, take a pat from me. <3", color=0x000000)
        result = random.choice(pat_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def kiss(ctx, *, user: discord.Member):
    embed = discord.Embed(title="{} Embrasse {}.".format(ctx.message.author, user), color=0x000000)
    result = random.choice(kiss_gifs["results"])
    chosen_media = result["media"][0]
    url = chosen_media["gif"]["url"]
    embed.set_image(url=url)
    await ctx.send(embed=embed)

@kiss.error    
async def kiss_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(title="Membre introuvable alors embrasse toi tout seul :)", color=0x000000)
        result = random.choice(kiss_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(title="Ayy vous êtes tout seul :(", color=0x000000)
        result = random.choice(kiss_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def hug(ctx, *, user: discord.Member):
    embed = discord.Embed(title="{} fait un calin à {}.".format(ctx.message.author, user), color=0x000000)
    result = random.choice(hug_gifs["results"])
    chosen_media = result["media"][0]
    url = chosen_media["gif"]["url"]
    embed.set_image(url=url)
    await ctx.send(embed=embed)

@hug.error
async def hug_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(title="Membre introuvable alors caline toi tout seul :)", color=0x000000)
        result = random.choice(hug_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(title="Aww, looks li.", color=0x000000)
        result = random.choice(hug_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)

@client.command()
async def slap(ctx, *, user: discord.Member):
    embed = discord.Embed(title="{} slaps {}.".format(ctx.message.author, user), color=0x000000)
    result = random.choice(slap_gifs["results"])
    chosen_media = result["media"][0]
    url = chosen_media["gif"]["url"]
    embed.set_image(url=url)
    await ctx.send(embed=embed)

@slap.error
async def slap_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(title="Membre introuvable alors gifle toi tout seul :)", color=0x000000)
        result = random.choice(slap_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(title="Aww, looks like you're too weak to slap someone, so I'll slap you.",
                              color=0x000000)
        result = random.choice(slap_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def cuddle(ctx, *, user: discord.Member):
    embed = discord.Embed(title="{} cuddles {}.".format(ctx.message.author, user), color=0x000000)
    result = random.choice(cuddle_gifs["results"])
    chosen_media = result["media"][0]
    url = chosen_media["gif"]["url"]
    embed.set_image(url=url)
    await ctx.send(embed=embed)
    
@cuddle.error
async def cuddle_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(title="Membre introuvable alors rapproche toi de moi :)", color=0x000000)
        result = random.choice(cuddle_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(title="Aww, looks like you're lonely, I'll cuddle you.", color=0x000000)
        result = random.choice(cuddle_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def blush(ctx):
    embed = discord.Embed(title="{} blushes.".format(ctx.message.author), color=0x000000)
    result = random.choice(blush_gifs["results"])
    chosen_media = result["media"][0]
    url = chosen_media["gif"]["url"]
    embed.set_image(url=url)
    await ctx.send(embed=embed)
    
@client.command()
async def penis(ctx, *, user: discord.Member):
    sizes = ["8D", "8=D", "8==D", "8===D", "8====D", "8=====D", "8======D", "8=======D", "8========D", "8=========D",
             "8==========D", "8===========D", "8============D", "8=============D", "8==============D",
             "8===============D"]
    if user.id == 237938976999079948:
        size = "sorry bro, my dick so big this message can't fit it, for more info ask your mom, ily"
    else:
        size = random.choice(sizes)
    embed = discord.Embed(description=f"{user}'s pee pee size \n\n{size}", color=0x000000)
    embed.set_author(name=f"{ctx.message.author}", icon_url=ctx.message.author.avatar_url)
    embed.set_thumbnail(url=user.avatar_url)
    await ctx.send(embed=embed)
    
@penis.error
async def penis_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="How did this error get raised to begin with?", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        sizes = ["8D", "8=D", "8==D", "8===D", "8====D", "8=====D", "8======D", "8=======D", "8========D",
                 "8=========D", "8==========D", "8===========D", "8============D", "8=============D",
                 "8==============D", "8===============D"]
        size = random.choice(sizes)
        embed = discord.Embed(description=f"{ctx.message.author}'s pee pee size \n\n{size}", color=0x000000)
        embed.set_author(name=f"{ctx.message.author}", icon_url=ctx.message.author.avatar_url)
        embed.set_thumbnail(url=ctx.message.author.avatar_url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)

@client.command()
async def thotrate(ctx, *, user: discord.Member):
    les = random.randint(0, 100)
    embed = discord.Embed(
        description="{} is a **{}**% thot. <:shiki_is_cool:612767957570945024>".format(user.mention, str(les)),
        color=0xef42f5)
    embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
    embed.set_thumbnail(url=user.avatar_url)
    await ctx.send(embed=embed)
    
@thotrate.error
async def thotrate_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="I couldn't find this member.", color=0x000000)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        les = random.randint(0, 100)
        embed = discord.Embed(
            description="{} is a **{}**% thot. <:shiki_is_cool:612767957570945024>".format(ctx.message.author.mention,
                                                                                           str(les)),
            color=0xef42f5)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_thumbnail(url=ctx.message.author.avatar_url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def howlesbian(ctx, *, user: discord.Member):
    les = random.randint(0, 101)
    embed = discord.Embed(
        description="{} is **{}**% lesbian. <:lesbian22:612745721883656203>".format(user.mention, str(les)),
        color=0xef42f5)
    embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
    embed.set_thumbnail(url=user.avatar_url)
    await ctx.send(embed=embed)
    
@howlesbian.error
async def howlesbian_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="I couldn't find this member.", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        les = random.randint(0, 101)
        embed = discord.Embed(
            description="{} is **{}**% lesbian. <:lesbian22:612745721883656203>".format(ctx.message.author.mention,
                                                                                        str(les)),
            color=0xef42f5)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_thumbnail(url=ctx.message.author.avatar_url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)

@client.command(name="8ball")
async def ball(ctx, *, message: str):
    if len(message) > 0:
        responds = ["Oui", "Non", "Peut être", "Pas sûr", "Sûrement", "Loin de la", "Jamais",
                    "Bien evidemment", "À voir", "Oui avec un grand 'O'", "Pas du tout", "C'est possible", "Pas facile comme question",
                    "Hmmm ça dépend", "Enormement", "Je ne sait pas", "Non avec un grand 'N'",
                    "Oulaaa négatif", "Heureusement que oui"]
        choice = random.choice(responds)
        embed1 = discord.Embed(description="__8Ball__\n\n...", color=0xffffff)
        embed1.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        msg = await ctx.send(embed=embed1)
        await asyncio.sleep(1)
        embed2 = discord.Embed(description="__8Ball__\n\n**{}**".format(choice), color=0xf252e8)
        embed2.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        await msg.edit(embed=embed2)
    else:
        embed1 = discord.Embed(description="__8Ball__\n\nI Je ne vous donne pas de réponse car il n'ya pas de question !",
                               color=0x000000)
        embed1.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        await ctx.send(embed=embed1)
        
@ball.error
async def ball_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="How did this error get raised to begin with?", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(description="__8Ball__\n\nI Je ne vous donne pas de réponse car il n'ya pas de question !",
                              color=0x000000)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def roast(ctx, *, user: discord.Member):
    responds = ["are you sure youre not mentally retarded?", "that's gay..", "can't roast him, he doesn't have parents",
                "this is why no one likes you", "just stfu retard", "they got no balls dawg", "can u speak chong bong?",
                "what u want pussy?", "!!", "couldn't roast"]
    choice = random.choice(responds)
    embed2 = discord.Embed(description="{}".format(choice), color=0xf252e8)
    embed2.set_author(name="{}".format(user), icon_url=user.avatar_url)
    embed2.set_footer(text="Roasted by {}".format(ctx.message.author))
    await ctx.send(embed=embed2)
    
@roast.error
async def roast_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="I couldn't find this member. No roasing.", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(description="Give me a member to roast.", color=0x000000)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def ship(ctx, user: discord.Member, user2: discord.Member):
    percent = random.randint(0, 100)
    strr = " "
    if percent >= 0 and percent <= 10:
        strr = "horrible"
    if percent >= 11 and percent <= 20:
        strr = "very bad"
    if percent >= 21 and percent <= 30:
        strr = "bad"
    if percent >= 31 and percent <= 40:
        strr = "worse than avarage"
    if percent >= 41 and percent <= 50:
        strr = "avarage"
    if percent >= 51 and percent <= 60:
        strr = "better than avarage"
    if percent == 69:
        strr = ":wink:"
    if percent >= 61 and percent <= 68:
        strr = "good"
    if percent == 70:
        strr = "good"
    if percent >= 71 and percent <= 80:
        strr = "very good"
    if percent >= 81 and percent <= 90:
        strr = "almost perfect"
    if percent >= 91 and percent <= 100:
        strr = "amazing"
    embed = discord.Embed(title=":two_hearts:  MATCHMAKING: :two_hearts: ",
                          description="**{}** :heart: **{}**\n\n**{}%**! That's **{}**.".format(user.name, user2.name,
                                                                                                str(percent), strr),
                          color=0x000000)
    await ctx.send(embed=embed)
    
@ship.error
async def ship_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="You didn't give me 1 or 2 correct users.", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        percent = random.randint(0, 100)
        strr = " "
        if percent >= 0 and percent <= 10:
            strr = "horrible"
        if percent >= 11 and percent <= 20:
            strr = "very bad"
        if percent >= 21 and percent <= 30:
            strr = "bad"
        if percent >= 31 and percent <= 40:
            strr = "worse than avarage"
        if percent >= 41 and percent <= 50:
            strr = "avarage"
        if percent >= 51 and percent <= 60:
            strr = "better than avarage"
        if percent == 69:
            strr = ":wink:"
        if percent >= 61 and percent <= 68:
            strr = "good"
        if percent == 70:
            strr = "good"
        if percent >= 71 and percent <= 80:
            strr = "very good"
        if percent >= 81 and percent <= 90:
            strr = "almost perfect"
        if percent >= 91 and percent <= 100:
            strr = "amazing"
        user = ctx.message.content[6:]
        userr = await commands.MemberConverter().convert(ctx, user)
        embed = discord.Embed(title=":two_hearts:  MATCHMAKING: :two_hearts: ",
                              description="**{}** :heart: **{}**\n\n**{}%**! That's **{}**.".format(ctx.message.author.name, userr.name,
                                                                                                    str(percent), strr),
                              color=0x000000)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def rate(ctx, who, *, user: discord.Member):
    if who == "dy":
        cool = random.randint(0, 10)
        embed = discord.Embed(title="👀", description="{} is a **{}**/10.".format(user.mention, str(cool)),
                              color=0xffffff)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Rated by Dy")
        await ctx.send(embed=embed)
        return
    if who == "shiki":
        cool = random.randint(0, 10)
        embed = discord.Embed(title="<:thonk:611367036282732574>",
                              description="{} is a **{}**/10. <a:smileg:611367087201320991>".format(user.mention,
                                                                                                    str(cool)),
                              color=0x4287f5)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        #    embed.set_thumbnail(url=user.avatar_url)
        embed.set_footer(text="Rated by Shiki")
        await ctx.send(embed=embed)
        return
    else:
        embed = discord.Embed(
            description="You didn't provide a valid argument, ``rate`` accepts only **dy** and **shiki**.",
            color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
        return
      
@rate.error
async def rate_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="I couldn't find this member.", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(description="You actually have to give me a member to rate.", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def howgay(ctx, *, user: discord.Member):
    gay = random.randint(0, 101)
    embed = discord.Embed(description="{} is **{}**% gay. :gay_pride_flag:".format(user.mention, str(gay)),
                          color=0xef42f5)
    embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
    embed.set_thumbnail(url=user.avatar_url)
    await ctx.send(embed=embed)
    
@howgay.error
async def howgay_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="I couldn't find this member.", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        gay = random.randint(0, 101)
        embed = discord.Embed(description="{} is **{}**% gay. :gay_pride_flag:".format(ctx.message.author.mention, str(gay)),
                              color=0xef42f5)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_thumbnail(url=ctx.message.author.avatar_url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def howhot(ctx, *, user: discord.Member):
    gay = random.randint(0, 101)
    embed = discord.Embed(description="{} is **{}**% hot. :sweat_drops:".format(user.mention, str(gay)), color=0xef42f5)
    embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
    embed.set_thumbnail(url=user.avatar_url)
    await ctx.send(embed=embed)
    
@howhot.error
async def howhot_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(description="I couldn't find this member.", color=0xFF3639)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_footer(text="Error raised on: {}".format(ctx.message.content))
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        gay = random.randint(0, 101)
        embed = discord.Embed(description="{} is **{}**% hot. :sweat_drops:".format(ctx.message.author.mention, str(gay)), color=0xef42f5)
        embed.set_author(name="{}".format(ctx.message.author), icon_url=ctx.message.author.avatar_url)
        embed.set_thumbnail(url=ctx.message.author.avatar_url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
    
@client.command()
async def poke(ctx, user: discord.Member):
    embed = discord.Embed(title="{} pokes {}. Cutee!".format(ctx.message.author, user), color=0x000000)
    result = random.choice(poke_gifs["results"])
    chosen_media = result["media"][0]
    url = chosen_media["gif"]["url"]
    embed.set_image(url=url)
    await ctx.send(embed=embed)
    
@poke.error
async def poke_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(title="{} pokes air.".format(ctx.message.author.name), color=0x000000)
        result = random.choice(poke_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(title="I poke {} because they annoy me. >:(".format(ctx.message.author.name), color=0x000000)
        result = random.choice(poke_gifs["results"])
        chosen_media = result["media"][0]
        url = chosen_media["gif"]["url"]
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    else:
        print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, None, file=sys.stderr)
        
@client.command()
async def facepalm(ctx):
    embed = discord.Embed(title="{} facepalms. Damn, that hurts!".format(ctx.message.author), color=0x000000)
    result = random.choice(facepalm_gifs["results"])
    chosen_media = result["media"][0]
    url = chosen_media["gif"]["url"]
    embed.set_image(url=url)
    await ctx.send(embed=embed)  
	
client.add_cog(cos.ReactionRoles(client))	
client.run("TOKEN")
