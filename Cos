import discord, decimal
from discord.ext import commands
from discord.ext.commands import Bot
from discord import Member, Object
import basic_utilities 
import asyncio

client = commands.Bot(command_prefix = commands.when_mentioned_or ("&"))

owner = 759155666542657576

async def get_user_banned(guild, name_arg):
    banned_users = await guild.bans()
    for ban_entry in banned_users:
        user = ban_entry.user
        if name_arg.lower().startswith(user.name.lower()):
            member_to_unban = Object(id=user.id)
            return member_to_unban
    return None

class ReactionRoles(commands.Cog):
    """
    Bot's initial commands.
    """
    def __init__(self, client):
        self.client = client
        self.home_server = 750945243305869343
        self.invite_url = "https://bit.ly/36PmU6N"
        
    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload: discord.RawReactionActionEvent):
        role, user = self.parse_reaction_payload(payload)
        if role is not None and user is not None and user.bot == False:
            await user.add_roles(role, reason="ReactionRole")

    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload: discord.RawReactionActionEvent):
        role, user = self.parse_reaction_payload(payload)
        if role is not None and user is not None and user.bot == False:
            await user.remove_roles(role, reason="ReactionRole")
        
    
    @commands.command()
    async def ping(self, ctx):
        ping = decimal.Decimal(self.client.latency * 1000)
        ping = round(ping, 2)
        embed = discord.Embed(title="Pong!", description="Voici la latence: {0}".format(ping), color = discord.Color.blue())
        await ctx.send(embed=embed)
        
    @commands.has_permissions(manage_channels=True)    
    @commands.command(pass_context=True, name="lockdown")
    async def lockdown(self, ctx):
        """Lock message sending in the channel."""
        try:
            try:
                mod_strings = load_moderation()
                mod_role_strings = mod_strings[ctx.message.guild.name]
                mod_roles = []
                for m in mod_role_strings:
                    mod_roles.append(discord.utils.get(ctx.message.guild.roles, name=m))
            except:
                mod_roles = []
            server = ctx.message.guild
            overwrites_everyone = ctx.message.channel.overwrites_for(server.default_role)
            overwrites_owner = ctx.message.channel.overwrites_for(server.role_hierarchy[0])
            if ctx.message.channel.id in self.states:
                await ctx.send("ðŸ”’ Channel is already locked down. Use `unlock` to unlock.")
                return
            states = []
            for a in ctx.message.guild.role_hierarchy:
                states.append([a, ctx.message.channel.overwrites_for(a).send_messages])
            self.states[ctx.message.channel.id] = states
            overwrites_owner.send_messages = True
            overwrites_everyone.send_messages = False
            await ctx.message.channel.set_permissions(server.default_role, overwrite=overwrites_everyone)
            for modrole in mod_roles:
                await ctx.message.channel.set_permissions(modrole, overwrite=overwrites_owner)
            await ctx.send(
                "ðŸ”’ Channel locked down. Only roles with permissions specified in `moderation.json` can speak.")
        except discord.errors.Forbidden:
            await ctx.send(self.client.client_prefix + "Missing permissions.")

    @commands.has_permissions(manage_channels=True)    
    @commands.command(pass_context=True, name="unlock")
    async def unlock(self, ctx):
        """Unlock message sending in the channel."""
        try:
            if not ctx.message.channel.id in self.states:
                await ctx.send("ðŸ”“ Channel is already unlocked.")
                return
            for a in self.states[ctx.message.channel.id]:
                overwrites_a = ctx.message.channel.overwrites_for(a[0])
                overwrites_a.send_messages = a[1]
                await ctx.message.channel.set_permissions(a[0], overwrite=overwrites_a)
            self.states.pop(ctx.message.channel.id)
            await ctx.send("ðŸ”“ Channel unlocked.")
        except discord.errors.Forbidden:
            await ctx.send(self.client.client_prefix + "Missing permissions.")            
    @commands.command()
    @commands.has_permissions(manage_guild=True)
    async def set_prefix(self, ctx, *, pre):
        '''Set a custom prefix for the guild.'''
        result = await self.client.db.config.find_one({'_id': str(ctx.guild.id)})
        if not result:
            await self.client.db.config.update({'_id': str(ctx.guild.id)}, {'$set': {'_id': str(ctx.guild.id), 'prefix': str(pre)}})
            return ctx.send(f'The guild prefix has been set to `{pre}` Use `{pre}prefix <prefix>` to change it again.')
        result['prefix'] = str(pre)
        await self.client.db.config.update({'_id': str(ctx.guild.id)}, {'$set': result})
        await ctx.send(f'The guild prefix has been set to `{pre}` Use `{pre}prefix <prefix>` to change it again.')        
        
    @commands.command()
    @commands.has_permissions(manage_roles=True)
    async def role(self, ctx, member: discord.Member, role: discord.Role):
        if role in member.roles:
            await member.remove_roles(role)
            embed = discord.Embed(color=discord.Color.orange(), timestamp=ctx.message.created_at)
            embed.add_field(name="`Role RetirÃ©`", value=f"{member.name}#{member.discriminator} n'as plus sont role.")
            embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
            embed.set_footer(text="Delete RÃ´le")
            embed.add_field(name='Role: ', value=f'-{role}')

            await ctx.send(embed=embed)
        else:
            await member.add_roles(role)
            embed = discord.Embed(color=discord.Color.orange(), timestamp=ctx.message.created_at)
            embed.add_field(name="`Role DonnÃ©`", value=f'{member.name}#{member.discriminator} a bien reÃ§u sont rÃ´le !')
            embed.add_field(name='Role: ', value=f'+{role}')
            embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
            embed.set_footer(text="Give RÃ´le")

            await ctx.send(embed=embed)    
    
    @commands.command()
    @commands.is_owner()
    async def prefix(self, ctx, prefix = None):
        if prefix != None:
            self.client.command_prefix = prefix 
        else:
            prefix = ctx.prefix
        embed = discord.Embed(title="Prefix", description="Le prefix du bot est maintenant `{0}`".format(self.client.command_prefix), color = discord.Color.blue())
        await ctx.send(embed=embed)
        
    @commands.command(name="massunban", aliases=["unbanall"])
    @commands.has_permissions(administrator=True)
    async def moderation_mass_unban(self, ctx):
        def check(m):
            return m.author == ctx.author
        await ctx.send("Est-tu sÃ»r de vouloir unban all ? Y/N (Y = Oui & N = Non)")
        try:
            user_input = await self.client.wait_for("message", timeout=10.0, check=check)
        except asyncio.TimeoutError:
            return await ctx.send(f"{ctx.author.mention} Le temps est Ã©coulÃ© !")
        else:
            user_reply = user_input.content.lower()
            if not user_reply.startswith("y"):
                return await ctx.send("Ok, Je revient en arriÃ¨re.")
            elif user_reply.startswith("y"):
                await ctx.send("J'unban tout le monde...")
                bans = await ctx.guild.bans()
                for ban in bans:
                    user = ban.user
                    nombre = len(bans)
                    await ctx.guild.unban(user, reason=f"Unban All | RÃ©sponsable -> {ctx.author}")
                await ctx.send("**{}** personnes sont maintenant unban de **{}** !".format(nombre, ctx.guild.name))
        
        
    @commands.command()
    @commands.has_permissions(ban_members=True)
    async def ban(self, ctx, member: discord.Member, *, reason=None):

        # validity checks
        if (member.id == owner):
            await ctx.send("**{}** est le crÃ©ateur du bot, il ne peut donc pas Ãªtre banni !".format(member.name))
            return
        if (ctx.author.id == owner):
            await ctx.guild.ban(member, reason = reason)
            await ctx.send("**{}** est maintenant banni".format(member))
            return
        if (member == ctx.author):
            await ctx.send(f"Tu ne peut pas te bannir `{ctx.author.name}`.")
            return
        if ctx.author.top_role <= member.top_role:
            await ctx.send("**{}** ne peut pas Ãªtre banni ! Vous n'avez pas les permissions requises !".format(member.name))
            return
        elif (member == self.client.user):
            await ctx.send(f"Tu ne peut pas me bannir `{ctx.author.name}`.")
            return
             
                
        await member.ban(reason=reason)
        await ctx.send(f"{member} a Ã©tÃ© banni.")
        

    @commands.command(pass_context=True)
    @commands.has_permissions(ban_members=True)
    async def unban(self, ctx, user: discord.User):
        await ctx.guild.unban(user)
        embed = discord.Embed(description = f"{user} n'es plus ban.", color = 0xC400FF, timestamp=ctx.message.created_at)
        embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
        embed.set_footer(text="DÃ©banissement")
        await ctx.send(embed=embed)
  
    @commands.has_permissions(manage_channels=True)
    @commands.command()
    async def reaction_add(self, ctx, emote=None, role: discord.Role=None, channel: discord.TextChannel=None, message_id: int=None):
        if not ctx.guild.me.guild_permissions.administrator:
            embed=discord.Embed(title="Permission Denied.", description="I don't have permission to use this command. I am missing the `administrator permission`.", color=0x8b0000, timestamp=ctx.message.created_at)
            embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=embed)
            return
        if not emote:
            embed=discord.Embed(title="No emote?", description="Please put a emote!", color=0x8b0000, timestamp=ctx.message.created_at)
            embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=embed)
            return
        if not role:
            embed=discord.Embed(title="No role?", description="Please put a role!", color=0x8b0000, timestamp=ctx.message.created_at)
            embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=embed)
            return
        if ctx.author.top_role < role:
            embed=discord.Embed(title="You can't do that.", description=f"Your role is lower than the role you tried to set for the reaction role, try to get someone to move you above {role.mention}.".format(role), color=0x8b0000, timestamp=ctx.message.created_at)
            embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=embed)
            return
        if ctx.guild.me.top_role < role:
            embed=discord.Embed(title="Not allowed.", description=f"My role is lower than the role you tried to set for the reaction role, try moving me above {role.mention}.".format(role), color=0x8b0000, timestamp=ctx.message.created_at)
            embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=embed)
            return
        if not channel:
            embed=discord.Embed(title="No channel?", description="Please put a channel!", color=0x8b0000, timestamp=ctx.message.created_at)
            embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=embed)
            return
        if not message_id:
            embed=discord.Embed(title="No message id?", description="Please put a message id!", color=0x8b0000, timestamp=ctx.message.created_at)
            embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=embed)
            return
        message = await channel.fetch_message(message_id)
        await message.add_reaction(emote)
        self.add_reaction(ctx.guild.id, emote, role.id, channel.id, message_id)
        embed=discord.Embed(title="Emote added!", description=f"{emote} - {role.mention} - [message](https://www.discordapp.com/channels/{ctx.guild.id}/{channel.id}/{message_id})\nIf this is wrong you can always remove it!", color=0x8b0000, timestamp=ctx.message.created_at)
        embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)
        await ctx.send(embed=embed)  

def setup(client):
    client.add_cog(ClientMain(client))
